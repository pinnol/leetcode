先讲解一下Tarjan’s Strongly Connected Components algorithm
https://www.youtube.com/watch?v=TyWtx7q2D7Y

需要用到到元素有
id：初始化为0，每次遇到一个新的点就自增一下。
int[] ids: 每个元素的id，也就是DFS第一次访问到该点时对应的id，同时起到visited数组的作用。
int[] low_value: 每个点所能访问到的最小的祖先节点id，并且该祖先节点不在另一个SCC中。
stack: 遇到一个新节点就push进stack，当DFS backtrack的时候，如果遇到了SCC的根，就pop stack直到把该SCC全都pop出去。
set: 指示节点是否在stack中。

该算法的两个重点，一个是如何更新low—value，一个是记得每找到一个SCC就pop出stack，不然会把几个SCC合并到一起。

那么如何更新low—value呢？
两种情况：
一是DFS访问节点u的子节点v时，子节点v已经被访问过，且在stack中，lowValue = min(low_value[v], low_value[u])。
二是当DFS回溯的时候，lowValue = min(low_value[v], low_value[u])

如何判断找到了一个SCC？
回溯时，id = low_value的时候，该节点就是SCC的根。

代码：
UNVISITED = -1
n = number of nodes in graph
g = adjacency list with directed edges

id = 0       # Used to give each node an id
sccCount = 0 # Used to count number of SCCs found

# Index i in these arrays represents node i
ids = [0, 0, … 0, 0]               # Length n
low = [0, 0, … 0, 0]               # Length n
onStack = [false, false, …, false] # Length n
stack = an empty stack data structure

function findSccs():
  for(i = 0; i < n; i++): ids[i] = UNVISITED
  for(i = 0; i < n; i++):
    if(ids[i] == UNVISITED):
      dfs(i)
  return low

function dfs(at):
  stack.push(at)
  onStack[at] = true
  ids[at] = low[at] = id++
  
  # Visit all neighbours & min low-link on callback
  for(to : g[at]):
    if(ids[to] == UNVISITED): dfs(to)
    if(onStack[to]): low[at] = min(low[at],low[to])

  # After having visited all the neighbours of ‘at’
  # if we're at the start of a SCC empty the seen
  # stack until we’re back to the start of the SCC.
  if(ids[at] == low[at]):
    for(node = stack.pop();;node = stack.pop()):
      onStack[node] = false
      low[node] = ids[at]
      if(node == at): break
    sccCount++


思路：使用Tarjan算法，不过因为这题是无向图，所以需要做一些改动。因为是无向图，所以从任意一点出发，一定可以遍历全部的点。不存在向有向图时，
可能只走一个component，然后再从component外的另一点再出发的情况。然后，我们DFS时，传入parent，如果neighbor是parent，就continue。 
这样就保证了当两个component只有一条无向边连接节点u, v的时候，子节点v的lowValue不会影响到父节点u。
因此，我们不需要一个stack，然后再pop出SCC的情况。

class Solution {
    static int time = 0;
    static List<Integer>[] network;
    static int[] lowestVertex; //lowest vertext from current vertex
    static int[] discoveredTime; //discovered time of vertext
    static boolean[] visited;
    static List<List<Integer>> critialConnections;

    public static List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {

        initialization(n);
        buildNetwork(connections);
        getCritialConnections(0, -1);

        return critialConnections;
    }

    public static void initialization(int n) {
        lowestVertex = new int[n];
        discoveredTime = new int[n];
        visited = new boolean[n];
        critialConnections = new ArrayList<>();

        network = new ArrayList[n];
        for(int i=0; i<n; i++) network[i] = new ArrayList<>();
    }

    public static void buildNetwork(List<List<Integer>> connections) {
        for(List<Integer> connection :connections) {
            network[connection.get(0)].add(connection.get(1));
            network[connection.get(1)].add(connection.get(0));
        }
    }

    //dfs search
    public static void getCritialConnections(int current, int parent) {

        time++;
        lowestVertex[current] = time;
        discoveredTime[current] = time;
        visited[current] = true;

        for(int neighbor : network[current]) {
        // 注意这里，遇到parent就跳过。
            if(neighbor == parent) continue;

            if(visited[neighbor] == false) { //if it does not discovered

                getCritialConnections(neighbor, current);

                lowestVertex[current] = Math.min(lowestVertex[current], lowestVertex[neighbor]);

                /**
                 * lowestVertex of neighbor > current's discoveredTime => critical connection!!
                 * lowestVertex of neighbor <= current's discoveredTime
                 * => not critical connection. there is a circular network.
                 */
                // 如果大于当前节点的次序，说明neighbor是与current单线联通。neighbor是下一个SCC的根。
                // 并且，单线的情况一定是在第一次访问子节点的时候才会出现。
                if(lowestVertex[neighbor] > discoveredTime[current]) {
                    critialConnections.add(Arrays.asList(current, neighbor));
                }
            } else { //if this neighbor is already visited, lowerVertext of current will be updated!!
                // 当子节点已经被访问的时候，说明子节点和当前节点之间一定强连通。因为只有一条线时，我们会continue，这个子节点能被访问到，
                // 就说明这是另一条线。
                // 也可以改成Math.min(lowestVertex[current], lowestVertex[neighbor]);
                // 由于parent continue的影响，lowestVertex[neighbor]一定不会小于当前SCC的最小lowValue
                lowestVertex[current] = Math.min(lowestVertex[current], discoveredTime[neighbor]);
            }
        }
    }
}


// 也可以使用stack
class Solution {
    public static void main(String[] args) {
        List<List<Integer>> connections = new ArrayList<>();
        connections.add(Arrays.asList(0,1));
        connections.add(Arrays.asList(1,2));
        connections.add(Arrays.asList(2,0));
        connections.add(Arrays.asList(1,3));
        Test1 tt = new Test1();
        List<List<Integer>> res = tt.criticalConnections(4, connections);
        
        
    }
    static class Test1 {
        int time = 0;
        List<Integer>[] neighbors;
        int[] lowValue;
        int[] dist;
        Stack<Integer> stack;
        Set<Integer> onStack;
        int n;
        
        public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
            initialize(n);
            getNeighbors(connections);
            List<List<Integer>> res = getCriticalConnections();
            return  res;
        }
        
        private void initialize(int n) {
            this.n = n;
            
            dist = new int[n];
            lowValue = new int[n];
            onStack = new HashSet<>();
            stack = new Stack<>();
            
            neighbors = new ArrayList[n];
            for (int i = 0; i < n; i++) {
                neighbors[i] = new ArrayList<Integer>();
                dist[i] = -1;
            }
        }
        
        private void getNeighbors(List<List<Integer>> connections) {
            for (List<Integer> connection : connections) {
                neighbors[connection.get(0)].add(connection.get(1));
                neighbors[connection.get(1)].add(connection.get(0));
            }
        }
        
        private List<List<Integer>> getCriticalConnections() {
            List<List<Integer>> criticalConnections = new ArrayList<>();
            // for (int i = 0; i < n; i++) {
            //     if (dist[i] == -1) {
            //         dfs(criticalConnections, i);
            //     }
            // }
            dfs(criticalConnections, 0, -1);
            return criticalConnections;
        }
        
        private void dfs(List<List<Integer>> criticalConnections, int at, int parent) {
            stack.push(at);
            onStack.add(at);
            time++;
            dist[at] = time;
            lowValue[at] = time;
            for (Integer neighbor : neighbors[at]) {
                if (parent == neighbor) continue;
                if (dist[neighbor] == -1) {
                    dfs(criticalConnections, neighbor, at);
                    
                    if (lowValue[neighbor] > dist[at]) {
                        criticalConnections.add(Arrays.asList(at, neighbor));
                    }
                }
                if (onStack.contains(neighbor)) {
                    lowValue[at] = Math.min(lowValue[at], lowValue[neighbor]);
                }
            }
            
            if (dist[at] == lowValue[at]) {
                while (!stack.isEmpty()) {
                    Integer curr = stack.pop();
                    onStack.remove(curr);
                    if (curr.equals(at)) {
                        break;
                    }
                }
            }
            
        }
    }
}


