class Solution {
    public int maxProfit(int[] prices) {
        int numday = prices.length;
        int profit = 0;
        int max = 0;
        for(int i = 0; i < numday; i++){
            for(int j = i; j < numday; j++){
                if (prices[j] < prices[i]) continue;
                profit = prices[j] - prices[i];
                max = Math.max(profit, max);
            }
        }
        return max;
    }
}
//----------------------------------------------------
class Solution {
    public int maxProfit(int[] prices) {
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        
        for(int i=0;i<prices.length;i++){
            if(prices[i] < minPrice){
                minPrice = prices[i];
            }else if(prices[i] - minPrice > maxProfit){
                maxProfit = prices[i] - minPrice;
            }
        }
        return maxProfit;
    }
}
//------------------------------------------------------
class Solution {
    public int maxProfit(int[] prices) {
        int lowestPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        
        for(int p : prices) {
            if(p < lowestPrice) {
                lowestPrice = p;
            }
            
            if(p - lowestPrice > maxProfit) {
                maxProfit = p - lowestPrice;
            }
        }
        
        return maxProfit;
    }
}
//better
