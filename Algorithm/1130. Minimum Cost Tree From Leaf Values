https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/discuss/339959/One-Pass-O(N)-Time-and-Space
https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/discuss/340489/Summary-and-reasoning-of-different-solutions

思路：注意局部最小时，一找到比局部最小值大的数就可以做乘法，而不需要管这个数的右边是不是还有更大一点的数，比如[6,2,4,5]中2是最小，4的旁边还有5比4大。
这是因为我们需要尽量把arr[i-1]和arr[i]，或者arr[i]和arr[i + 1]，放的尽量低，而叶子节点只能有两个，2会与5相乘的前提是4和5是叶子节点，这就与我们的想法违背了。

// 使用单调栈寻找局部最小。
时间复杂度：O(n)
空间复杂度：O(n)
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        int n = nums.length;
        int[] res = new int[n];
        for (int i = 2 * n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[i % n] >= nums[stack.peek()]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                stack.push(i % n);
                res[i % n] = -1;
            } else {
                res[i % n] = nums[stack.peek()];
                stack.push(i % n);
            }
        }
        return res;
    }
}
