class Solution {
    public int majorityElement(int[] nums) {
        int length = nums.length;
        Arrays.sort(nums);
        int number = 0;
        int integer = nums[0];
        for(int i = 0; i < length; i++){
            if(nums[i] == integer){
                number++;
                if (i == length - 1 && number > length/2){
                    return integer;
                }
            } else {
                if (number > length/2) {
                    return integer;
                }
                integer = nums[i];
                number = 1;
            }
        }
        throw new IllegalArgumentException("No such integer");
    }
}


//----------------------------------------------------------------------------------

class Solution {
    private Map<Integer, Integer> countNums(int[] nums) {
        Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
        for (int num : nums) {
            if (!counts.containsKey(num)) {
                counts.put(num, 1);
            }
            else {
                counts.put(num, counts.get(num)+1);
            }
        }
        return counts;
    }

    public int majorityElement(int[] nums) {
        Map<Integer, Integer> counts = countNums(nums);

        Map.Entry<Integer, Integer> majorityEntry = null;
        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {
            if (majorityEntry == null || entry.getValue() > majorityEntry.getValue()) {
                majorityEntry = entry;
            }
        }

        return majorityEntry.getKey();
    }
}


//----------------------------------------------------------------------------------
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}


//----------------------------------------------------------------------------------
//        Approach 6: Boyer-Moore Voting Algorithm
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        Integer candidate = null;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}
