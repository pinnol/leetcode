// O(nlogn) Binary Search
// 思路1：使用一个辅助空间minLast数组。
// minLast[i]存储多个长度为i的子序列的结尾值中最小的一个的数值。（长度为i的子序列有多个，对应的结尾位置有多个，
// 以这些位置为结尾的LIS长度都为i， 则这些结尾数字中最小的一个存在minLast[i]中）
// minLast数组严格递增。且下标表示LIS长度，也是严格递增。

// 对于每个位置i，我们要找minLast中第一个大于等于nums[i]的值并替换（找到比当前数小的最长序列的位置），这个操作在minLast数组中二分查找。
// 最终我们要遍历minLast，找到最后一个有效值，也就是最长子序列。

// 例如[1,2,5,6,7,3,4]
// 一开始
长度          0       1   2   3   4   5       6           7   
minLast MIN_VALUE    1   2   5   6   7   MAX_VALUE   MAX_VALUE

等我们遍历到i=5，也就是数字3的时候，我们会替换掉5，但是长度为4 和 5的minLast会保存，minLast单调递增。

时间复杂度：O(nlogn)
空间复杂度：O(n)


public class Solution {
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    public int longestIncreasingSubsequence(int[] nums) {
        int[] minLast = new int[nums.length + 1];
        minLast[0] = Integer.MIN_VALUE;
        for (int i = 1; i <= nums.length; i++) {
            minLast[i] = Integer.MAX_VALUE;
        }
        
        for (int i = 0; i < nums.length; i++) {
            // find the first number in minLast >= nums[i]
            int index = binarySearch(minLast, nums[i]);
            // replace the first larger number
            minLast[index] = nums[i];
        }
        
        for (int i = nums.length; i >= 1; i--) {
            if (minLast[i] != Integer.MAX_VALUE) {
                return i;
            }
        }
        
        return 0;
    }
    
    // find the first position whose number > num, then we replace it
    private int binarySearch(int[] minLast, int num) {
        int start = 0, end = minLast.length - 1;
        while (start + 1 < end) {
            int mid = (end - start) / 2 + start;
            if (minLast[mid] < num) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        return end;
    }
}

思路2：f[i] 表示以第i个数字为结尾的最长上升子序列的长度。
对于每个数字nums[i]，枚举前面所有小于自己的数字nums[j]，则f[i] = max{f[j]} + 1. 如果没有比自己小的，f[i] = 1;

时间复杂度：O(n^2)
空间复杂度：O(n)


public class Solution {
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
   
    
    public int longestIncreasingSubsequence(int[] nums) {
        int[] f = new int[nums.length];
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            f[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    // 只有f[i] > f[j] + 1的时候才需要保持f[i]，否则就更新
                    f[i] = f[i] > f[j] + 1 ? f[i] : f[j] + 1;
                }
            }
            if (f[i] > max) {
                max = f[i];
            }
        }
        return max;
    }
}
