思路：使用单调上升栈，栈中只保存升序序列，新元素插入前 pop 掉所有比它大的。stack中保存的是每个高度对应的index，比较时需要使用height[index].
     被pop说明此时push进来的高度小于等于它，也就是说这个高度对应的长方形最长的左右两边已经找到了。stack中它下面的那个就是它左边的边，push进来的
     就是它右边的边（对于等于的情况来说，因为我们只需要找最大值，所以虽然此时的高度的右边界并不是push进来的这个，最后的结果仍然不会被影响）。


最大矩形一定是某一个柱形往左往右直到不能前进，形成的矩形

• 需要知道一个数字往左和往右第一个小于这个数字的位置

• 单调递增栈

– 压栈时弹出大于等于自己的值

– 最后停下来时碰到的栈顶就是左边第一个比自己小的值

– 一个数X被新来的值R弹出栈顶，那么R就是X右边第一个小于等于X的值

• 如果有相同的数，那么最靠右的bar会求得最大面积

• 最后插入-1


时间复杂度：O(n)
空间复杂度：O(n)


public class Solution {
    /**
     * @param height: A list of integer
     * @return: The area of largest rectangle in the histogram
     */
    public int largestRectangleArea(int[] height) {
        if (height == null && height.length == 0) {
            return 0;
        }
        Stack<Integer> stack = new Stack<>();
        int n = height.length;
        int res = 0;
        int area;
        for (int i = 0; i <= n; i++) {
            int h = i == n? -1 : height[i]; 
            while (!stack.isEmpty() && height[stack.peek()] >= h) {
                int hIndex = stack.pop();
                int width = stack.isEmpty()? i : i - stack.peek() - 1;
                area = height[hIndex] * width;
                res = Math.max(area, res);
            }
            stack.push(i);
        }
        return res;
    }
}
