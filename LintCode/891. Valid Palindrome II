思路：依然用相向双指针的方式从两头出发，两根指针设为 L 和 R。
如果 s[L] 和 s[R] 相同的话，L++, R--
如果 s[L] 和 s[R] 不同的话，停下来，此时可以证明，如果能够通过删除一个字符使得整个字符串变成回文串的话，那么一定要么是 s[L]，要么是 s[R]。

时间复杂度：O(n)
空间复杂度：O(1)

class Solution {

    public boolean validPalindrome(String s) {
        return validate(s, 0, s.length() - 1, 0, 1);
    }
    
    public boolean validate(String s, int i, int j, int delCount, int N) {
        if (delCount > N) return false; // N - times of deletion allowed.
        while (i < j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
            } else {
                delCount++;
                return validate(s, i, j - 1, delCount, N) || validate(s, i + 1, j, delCount, N);
            }
        }
        return true;
    }
    
}
