// 采用记忆化搜索
public class Solution {
    /*
     * @param s: A string
     * @param wordDict: A set of words.
     * @return: All possible sentences.
     */
    public List<String> wordBreak(String s, Set<String> wordDict) {
        if (s == null || s.length() == 0) {
            return new ArrayList<String>();
        }
        Map<String, List<String>> memo = new HashMap<>();
        return wordBreakHelper(s, wordDict, memo);
    }
    
    private List<String> wordBreakHelper(String s, Set<String> dict, Map<String, List<String>> memo) {
        if (memo.containsKey(s)) {
            return memo.get(s);
        }
        
        List<String> results = new ArrayList<>();
        
        if (s.length() == 0) {
            return results;
        }
        if (dict.contains(s)) {
            results.add(s);
        }
        
        for (int i = 1; i < s.length(); i++) {
            String word = s.substring(0, i);
            if (!dict.contains(word)) {
                continue;
            }
            
            List<String> segments = wordBreakHelper(s.substring(i), dict, memo);
            for (String segment : segments) {
                results.add(word + " " + segment);
            }
        }
        // 注意把memo更新，不然会有太多的递归，超内存限制
        memo.put(s, results);
        return results;
    }
}
