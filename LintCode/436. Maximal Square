思路：使用dp，dp[i][j]表示以(i, j)为右下角顶点的正方形的边长
    状态转移方程:
  if matrix[i][j] == 0
	  dp[i][j] = 0
  else                 // 此时为dp[i-1][j-1], dp[i-1][j], dp[i][j-1] 确定的区域的最大全1矩阵
	  dp[i][j] = min{dp[i-1][j-1], dp[i-1][j], dp[i][j-1]} + 1	// 得到此方程需要一定推导, 纸笔画一下
    
  注意dp[i-1][j-1], dp[i-1][j], dp[i][j-1]三个边长必须相等且右下角为1时新矩形才成立，否则不行。
  边界: if i == 0 or j == 0: dp[i][j] = matrix[i][j]
  答案: max\{dp[i][j]\}^2max{dp[i][j]} 
  
时间复杂度：O(mn)
空间复杂度：O(mn)


public class Solution {
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    public int maxSquare(int[][] matrix) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] edge = new int[m + 1][n + 1];
        int res = Integer.MIN_VALUE;
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (matrix[i - 1][j - 1] == 0) {
                    edge[i][j] = 0;
                } else {
                    edge[i][j] = Math.min(edge[i - 1][j], Math.min(edge[i - 1][j - 1], edge[i][j - 1])) + 1;
                }
                res = Math.max(res, edge[i][j]);
            }
        }
        
        return res * res;
    }
}
