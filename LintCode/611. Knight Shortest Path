// 注意这题在找邻居的时候，因为要判断是否已经visited过，所以不仅需要把邻居加到queue中，还要有visited的记录，如果我们选择创造一个boolean[][]
// 就会有额外空间，不妨直接将visit过的grid更改一下。并且需要注意的是，需要直接将找邻居和visit处理放到一个子函数中，不让需要两个for循环，会超时。

/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */

public class Solution {
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    public int shortestPath(boolean[][] grid, Point source, Point destination) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        
        boolean[][] visited = new boolean[m][n];
        Queue<Point> queue = new LinkedList<>();
        
        int step = 0;
        queue.offer(source);
        visited[source.x][source.y] = true;
        
        while (!queue.isEmpty()) {
            int curtLength = queue.size();
            for (int i = 0; i < curtLength; i++) {
                Point curt = queue.poll();
                if (comparePoint(curt, destination)){
                    return step;
                }
                queue = findNeighbors(curt, queue, grid);
            }
            step++;

        }
        return -1;
    }
    
    private boolean comparePoint(Point a, Point b) {
        return a.x == b.x && a.y == b.y;
    }
    
    private Queue<Point> findNeighbors(Point curt, Queue<Point> queue, boolean[][] grid) {
        int[] xstep = {1, 1, -1, -1, 2, 2, -2, -2};
        int[] ystep = {2, -2, 2, -2, 1, -1, 1, -1};
        
        List<Point> result = new ArrayList<>();
        
        for (int i = 0; i < 8; i++) {
            int x = curt.x + xstep[i];
            int y = curt.y + ystep[i];
            if (isBounded(x, y, grid) && grid[x][y] != true) {
                queue.add(new Point(x, y));
                grid[x][y] = true;
            }
            
        }
        return queue;
    }
    
    private boolean isBounded(int x, int y, boolean[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        
        return x >= 0 && x < m && y >= 0 && y < n; 
    }
    
    
    
    
}
