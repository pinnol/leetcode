思路：因为是排好序的matrix，所以将一个数poll出heap后，只需将后面相邻的两个加入堆中，此时这两个数时当前状态下最有可能为最小的值。

time complexity: O(klog(n)) 注意不是klog(k)，因为将相邻数字添加到heap中后，堆的大小不再是k，除非我们可以一直维持heap的大小为k，否则是klog(n)
space complexity: O(n)

public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @param k: An integer
     * @return: the kth smallest number in the matrix
     */
    class Pair {
        int x, y;
        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    public int kthSmallest(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0 || matrix.length == 0) {
            return 0;
        }
        PriorityQueue<Pair> heap = new PriorityQueue<>(k, new Comparator<Pair>(){
            public int compare(Pair a, Pair b) {
                return matrix[a.x][a.y] - matrix[b.x][b.y];
            }
        });
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        boolean[][] visited = new boolean[m][n];
        
        int[] dx = new int[]{0, 1};
        int[] dy = new int[]{1, 0};
        
        heap.offer(new Pair(0, 0));
        visited[0][0] = true;
        for (int i = 0; i < k - 1; i++) {
            Pair curr = heap.poll();
            // System.out.println("curr: x = " + curr.x + " y = " + curr.y);
            for (int j = 0; j < 2; j++) {
                // System.out.println("j = " + j);
                int nx = curr.x + dx[j];
                int ny = curr.y + dy[j];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny]) {
                    heap.offer(new Pair(nx, ny));
                    visited[nx][ny] = true;
                }
            }
        }
        Pair num = heap.poll();
        return matrix[num.x][num.y];
    }
}
