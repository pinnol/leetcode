public class Solution {
    /**
     * @param s: A string 
     * @param p: A string includes "." and "*"
     * @return: A boolean
     */
    public boolean isMatch(String s, String p) {
        if (s == null || p == null) {
            return false;
        }
        boolean[][] visited = new boolean[s.length()][p.length()];
        boolean[][] memo = new boolean[s.length()][p.length()];
        
        return isMatchHelper(s, 0, p, 0, visited, memo);
    }
    
    private boolean isMatchHelper(String s, int sIndex, String p, int pIndex, boolean[][] visited, boolean[][] memo) {
        if (s.length() == sIndex) {
            return allStar(p, pIndex);
        }
        
        if (pIndex == p.length()) {
            return sIndex == s.length();
        }
        
        if (visited[sIndex][pIndex]) {
            return memo[sIndex][pIndex];
        }
        
        
        boolean match = false;
        if (nextStar(p, pIndex)) {
            match = isMatchHelper(s, sIndex, p, pIndex + 2, visited, memo) ||
                    (charMatch(s, sIndex, p, pIndex) && isMatchHelper(s, sIndex + 1, p, pIndex, visited, memo));
        } else {
            match = charMatch(s, sIndex, p, pIndex) && isMatchHelper(s, sIndex + 1, p, pIndex + 1, visited, memo);
        }
        
        visited[sIndex][pIndex] = true;
        memo[sIndex][pIndex] = match;
        return match;
        
    }
    private boolean charMatch(String s, int sIndex, String p, int pIndex) {
        return s.charAt(sIndex) == p.charAt(pIndex) || p.charAt(pIndex) == '.';
    }
    
    private boolean nextStar(String p, int pIndex) {
        if (pIndex + 1 == p.length()) {
            return false;
        } 
        if (p.charAt(pIndex + 1) == '*') {
            return true;
        }
        return false;
    }
    
    private boolean allStar(String p ,int pIndex) {
        int i;
        // 用i表示‘*’的位置
        for (i = pIndex + 1; i < p.length(); i += 2) {
            if (p.charAt(i) != '*') {
                return false;
            }
        }
        // 注意这里还有一种情况，就是当i的位置正好是末尾的下一个时，说明p以单个字符结尾，不全为*。 九章的写法更好
        if (i == p.length()) {
            return false;
        }
        return true;
    }
    //
    //private boolean isEmpty(String p, int pIndex) {    //形如"x*x*"形式
    //    for (int i = pIndex; i < p.length(); i += 2) {
    //        if (i + 1 >= p.length() || p.charAt(i + 1) != '*') {   //如果不是'*'，无法匹配
    //            return false;
    //        }
    //    }
    //    return true;
    //}
}
