思路：简单的DFS，使用两个变量记录待添加的左右括号数，以及当前的括号组合，注意右括号的待添加数量一定要大于等于左括号，否则结束递归。

时间复杂度：O(n)
空间复杂度：O(n)


public class Solution {
    /**
     * @param n: n pairs
     * @return: All combinations of well-formed parentheses
     */
    public List<String> generateParenthesis(int n) {
        
        List<String> res = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        dfs(res, n, n, sb);
        return res;
    }
    
    
    private void dfs(List<String> res, int left, int right, StringBuilder sb) {
        if (right < left) {
            return;
        }
        
        if (right < 0 || left < 0) {
            return;
        }
        
        if (left == 0 && right == 0) {
            res.add(sb.toString());
            return; 
        }
        
        sb.append("(");
        dfs(res, left - 1, right, sb);
        sb.deleteCharAt(sb.length() - 1);
        
        sb.append(")");
        dfs(res, left, right - 1, sb);
        sb.deleteCharAt(sb.length() - 1);        
        
    }
}
