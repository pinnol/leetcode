/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        if(graph == null) {
            return null;
        }
        
        ArrayList<DirectedGraphNode> result = new ArrayList<>();
        
        Map<DirectedGraphNode, Integer> degree = new HashMap<>();
        // Map<DirectedGraphNode, ArrayList<DirectedGraphNode>> edges = new Map<>();
        
        for (DirectedGraphNode node : graph) {
            for (DirectedGraphNode neighbor : node.neighbors) {
                if (degree.containsKey(neighbor)) {
                    degree.put(neighbor, degree.get(neighbor)+1);
                } else {
                    degree.put(neighbor, 1);
                }
            }
        }
        
        Queue<DirectedGraphNode> queue = new LinkedList<>();
        for (DirectedGraphNode node : graph) {
            if (!degree.containsKey(node)) {
                queue.offer(node);
            }
        }
        
        
        while(!queue.isEmpty()) {
            DirectedGraphNode curr = queue.poll();
            result.add(curr);
            for (DirectedGraphNode neighbor : curr.neighbors) {
                degree.put(neighbor, degree.get(neighbor)-1);
                if (degree.get(neighbor) == 0) {
                    queue.offer(neighbor);
                }
            }
        }
        
        return result;
        
    }
}


注意要把map中的整数初始化，不然就会需要通过!degree.containsKey(node)来判断node的degree是否为零。
