思路：既可以使用BFS，也可以使用DFS

时间复杂度：O(mn)
空间复杂度：O(mn)

// BFS
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    Queue<Coordinate> queue = new LinkedList<>();
    class Coordinate{
        int x;
        int y;
        Coordinate(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    public int numIslands(boolean[][] grid) {
        // write your code here
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        int count = 0;

        int n = grid.length;
        int m = grid[0].length;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j]){
                    count++;
                    BFS(grid, i, j);
                }
            }
        }
        
        return count;
    }
    
    private void BFS(boolean[][] grid, int x, int y){
        queue.add(new Coordinate(x,y));
        grid[x][y] = false;
        
        int[] xdirect = {0, 1, 0, -1};
        int[] ydirect = {1, 0, -1, 0};
        
        while(!queue.isEmpty()){
            Coordinate coor = queue.poll();
            for (int i = 0; i < 4; i++) {
                int neighbour_x = coor.x+xdirect[i];
                int neighbour_y = coor.y+ydirect[i];
                if (inBound(grid, neighbour_x, neighbour_y) && (grid[neighbour_x][neighbour_y])){
                    queue.add(new Coordinate(neighbour_x,neighbour_y));
                    grid[neighbour_x][neighbour_y] = false;
                }
            }
        }
    }
    
    private boolean inBound(boolean[][] grid, int x, int y){
        int n = grid.length;
        int m = grid[0].length;
        
        return x < n && x >= 0 && y < m && y >= 0;
    }
}


// DFS
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
     
    class Pair {
        int x, y;
        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    int[] dx = new int[]{1, 0, -1, 0};
    int[] dy = new int[]{0, -1, 0, 1};
    int n;
    int m;
    
    public int numIslands(boolean[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        Stack<Pair> stack = new Stack<>();
        m = grid.length;
        n = grid[0].length;
        int res = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    res++;
                    dfs(i, j, stack, grid);
                } 
            }
        }
        return res;
    }
    
    
    private void dfs(int x, int y, Stack<Pair> stack, boolean[][] grid) {
        grid[x][y] = false;
        stack.push(new Pair(x, y));
        while (!stack.isEmpty()) {
            Pair curr = stack.pop();
            for (int i = 0; i < 4; i++) {
                int nx = curr.x + dx[i];
                int ny = curr.y + dy[i];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny]) {
                    grid[nx][ny] = false;
                    stack.push(new Pair(nx, ny));
                }
            }
        }
    }
    
}
