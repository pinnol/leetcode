思路：使用target记录数组最右端的数字，然后用start和end标志寻找区间，
     如果mid位置上的数字小于等于最右端的数字时，区间向左移动，其余向右移动即可，返回start和end位置上较小值即可。

    这题code虽然简单，但其实隐含了一种情况，就是rotated sorted array也有可能没有被rotate，如[1,2,3]也算rotated array
    
时间复杂度: O(logn)
空间复杂度: O(1)

public class Solution {
    /**
     * @param nums: a rotated sorted array
     * @return: the minimum number in the array
     */
    public int findMin(int[] nums) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        int start = 0, end = nums.length - 1;
        int target = nums[nums.length - 1];
        
        // find the first element <= target
        while (start + 1 < end) {    		//用来控制区间大小
            int mid = start + (end - start) / 2;
            if (nums[mid] <= target) { 		//如果mid位置上的数字小于等于最右端的数字时，区间向左移动
                end = mid;
            } else {
                start = mid;			 
            }
        }
        return Math.min(nums[start],nums[end]);  //最终返回start和end位置上较小的数字即可
        
    }
}
