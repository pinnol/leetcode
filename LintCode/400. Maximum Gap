思路：借鉴了bucket sort的思想，取gloabal max and min，
令桶的大小为最大间隔的平均数，即（max - min）/ num，每个桶之内的数字之间的距离一定小于平均值，
所以一定不可能是答案，只要每个相邻桶的最小值与前一个桶的最大值之间的差有可能成为答案（因为要相邻）。
本题的一个难点在于定义桶的大小。
本题与bucket sort的区别在于没有桶内排序的过程，也没有合并所有桶结果的过程。

bucket的数量应该为nums.length，bucket[nums.length - 1]中只有最大值max。
使用long规避integer MAX_VALUE的情况。

time complexity: O(n)
space complexity: O(n)


public class Solution {
    /**
     * @param nums: an array of integers
     * @return: the maximun difference
     */
    public int maximumGap(int[] nums) {
        if (nums == null || nums.length < 2) {
            return 0;
        }
        
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        
        for (int num : nums) {
            min = Math.min(num, min);
            max = Math.max(num, max);
        }
        // System.out.println("min="+min);
        double size = (double) (max - min) / (nums.length - 1);
        // 也可以下面这种写法，avgGap 一定小于最大的差值，又因为数字都是整数，即便向上ceiling取证，avgGap也不可能大于最大差值，
           两个数不可能被包含在同一个桶中
           比如[2 4 6 9], 最大差值为3（即9 - 6），avgGap为2.3，向上取整为3，即便6正好在桶的开始，9也会成为下一个桶的开始，不可能在同一个桶里。
           因此，除非最大差值小于1（即数字不是int），向上ceiling时，avgGap才有可能在大于最大差值。
        //int avgGap = (int) Math.ceil((double) (max - min) / (nums.length - 1));
        // System.out.println("size="+size);
        long[] bucketMin = new long[nums.length];
        long[] bucketMax = new long[nums.length];
        
        for (int i = 0; i < nums.length; i++) {
            bucketMax[i] = Long.MIN_VALUE;
            bucketMin[i] = Long.MAX_VALUE;
        }
        
        for (int i = 0; i < nums.length; i++) {
            int pos = (int) Math.floor((nums[i] - min) / size);
            // System.out.println("pos="+pos);
            // System.out.println("num="+nums[i]);

            
            bucketMax[pos] = Math.max(nums[i], bucketMax[pos]);
            bucketMin[pos] = Math.min(nums[i], bucketMin[pos]);
            // if (pos == 3) {
            //     System.out.println("pos = "+3);            
            //     System.out.println("bucketMin = " + bucketMin[pos]);
            // }
        }
        
        
        // for (int i = 0; i < nums.length; i++) {
        //     System.out.println("i = "+i);
        //     System.out.println("bucketMin = "+bucketMin[i]);
        //     System.out.println("bucketMax = "+ bucketMax[i]);
        // }
        
        
        long res = 0;
        int pre = 0;
        for (int i = 1; i < nums.length; i++) {
            if (bucketMin[i] == Long.MAX_VALUE) {
                continue;
            }
            // System.out.println("i="+i);
            // System.out.println("bucketMin[i]="+bucketMin[i]);
            // System.out.println("pre="+pre);
            // System.out.println("bucketMax="+ bucketMax[pre]);
            res = Math.max(res, bucketMin[i] - bucketMax[pre]);
            pre = i;

        }
        return (int) res;
    }
}
