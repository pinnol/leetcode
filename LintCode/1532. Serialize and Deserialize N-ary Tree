思路：使用DFS。
     因为N-ary是不确定有多少子树的，所以我们一定要把属于同一子树的节点标识出来。这里我们用[]表示同一父节点的元素。


// 使用DFS
public class Solution {
    // 这里也可以写成每次serialize时，pos=1
    public int pos = 1;
    public String dfs(DirectedGraphNode root) {
        String ans="";
        if(root == null)
            return ans;
        ans += "[";
        ans += String.valueOf(root.label);
        for(int i = 0; i < root.neighbors.size() ; i++) {
                ans += dfs(root.neighbors.get(i));
        }
        ans += "]";
        return ans;
        
    }
    // 递归调用solve，每一层对应[]中的string，也就是一个父节点对应的子树。
    public UndirectedGraphNode solve(String data) {
        int num = 0;
        // 因为我们没有用逗号分隔每个节点，因而也不能用split直接得到每个节点的值，所以为了还原出原节点的值，我们需要手动x10。
            while(data.charAt(pos) >= '0' && data.charAt(pos) <= '9') {
                num *= 10;
                num += data.charAt(pos) - '0';
                pos++;
            }
            UndirectedGraphNode node =  new UndirectedGraphNode(num);
            // 如果当前[]中的string还有剩余，说明我们还需要DFS
            while(pos < data.length()) {
                if(data.charAt(pos) == '[' ) {
                    ++pos;
                    node.neighbors.add(solve(data));
                }
                else if(data.charAt(pos) == ']') {
                    pos++;
                    return node;
                }
            }
        return null;
    }
    public String serialize(ArrayList<DirectedGraphNode> nodes) {
        String ans="";
        if(nodes.size() == 0)
            return ans;
        return dfs(nodes.get(0));
    }
    public UndirectedGraphNode deserialize(String data) {
       if(data.length() == 0)
            return null;
        return solve(data);
    }
}
      
