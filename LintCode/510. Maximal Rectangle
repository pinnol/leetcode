思路：可以利用直方图的算法，以矩阵每一行为直方图的底部，通过1确定每个柱形的高度。

时间复杂度：O(n^2)
空间复杂度：O(n^2) 可以优化到O(n),通过计算每一行高度的时候就计算矩形大小。使用array存储高度。

public class Solution {
    /**
     * @param matrix: a boolean 2D matrix
     * @return: an integer
     */
    public int maximalRectangle(boolean[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int[][] height = new int[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!matrix[i][j]) {
                    height[i][j] = 0;
                } else {
                    height[i][j] = i == 0 ? 1 : height[i - 1][j] + 1;
                }
            }
        }
        
        int res = 0;
        for (int i = 0; i < m; i++) {
            int temp = largestRectangleArea(height[i]);
            res = Math.max(res, temp);
        }
        return res;
    }
    
    private int largestRectangleArea(int[] height) {
        Stack<Integer> stack = new Stack<>();
        int res = 0;
        for (int i = 0; i <= height.length; i++) {
            int curr = i == height.length? -1 : height[i];
            while (!stack.isEmpty() && curr <= height[stack.peek()]) {
                int h = height[stack.pop()];
                int width = stack.isEmpty()? i : i - stack.peek() - 1;
                int area = h * width;
                res = Math.max(res, area);
            }
            stack.push(i);
        }
        return res;
    }

}
