本题注意，四种东西需要维护
1、map
2、head and tail
3、对应点移动前的前后节点
4、对应点移动后的前节点

本题最好使用dummy node，不然有许多中情况需要考虑，容易出错，也不容易创建子函数。

思路1：使用doubly linkedlist，每次get或者set时，把对应的node放到队尾，如果超出capacity，就要删除对应的点。


time complexity: O(1)
space complexity: O(capacity of cache)

public class LRUCache {
    private class Node{
        Node prev;
        Node next;
        int key;
        int value;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            this.prev = null;
            this.next = null;
        }
    }

    private int capacity;
    private HashMap<Integer, Node> hs = new HashMap<Integer, Node>();
    private Node head = new Node(-1, -1);
    private Node tail = new Node(-1, -1);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        tail.prev = head;
        head.next = tail;
    }

    public int get(int key) {
        if( !hs.containsKey(key)) {    		//key找不到
            return -1;
        }

        // remove current
        Node current = hs.get(key);
        // 因为我们有head和tail的dummy node，所以current前后一定不为null
        current.prev.next = current.next;
        current.next.prev = current.prev;

        // move current to tail
        move_to_tail(current);			//每次get，使用次数+1，最近使用，放于尾部

        return hs.get(key).value;
    }

    public void set(int key, int value) {			//数据放入缓存
        // get 这个方法会把key挪到最末端，因此，不需要再调用 move_to_tail
        if (get(key) != -1) {
            hs.get(key).value = value;
            return;
        }

        if (hs.size() == capacity) {		//超出缓存上限
            hs.remove(head.next.key);		//删除头部数据
            head.next = head.next.next;
            head.next.prev = head;
        }

        Node insert = new Node(key, value);		//新建节点
        hs.put(key, insert);
        move_to_tail(insert);					//放于尾部
    }

    private void move_to_tail(Node current) {    //移动数据至尾部
        current.prev = tail.prev;
        tail.prev = current;
        current.prev.next = current;
        current.next = tail;
    }
}

===================================
另一种不使用dummy node的写法。

public class LRUCache {
    
    class Node {
        Node pre, next;
        int key, val;
        Node(int key, int val) {
            this.key = key;
            this.val = val;
            this.pre = null;
            this.next = null;
        }
    }
    Map<Integer, Node> keyToNode;
    int capacity;
    int currSize = 0;
    Node most;
    Node least;
    /*
    * @param capacity: An integer
    */public LRUCache(int capacity) {
        this.capacity = capacity;
        keyToNode = new HashMap<>();
    }

    /*
     * @param key: An integer
     * @return: An integer
     */
    public int get(int key) {
        Node node = keyToNode.get(key);
        if (node == null) {
            return - 1;
        }
        
        if (node == most) {
            return node.val;
        }
        if (node == least) {
            node.pre.next = null;
            least = node.pre;
        } else {
            node.pre.next = node.next;
            node.next.pre = node.pre;
        }
        
        if (most != null) {
            node.next = most;
            most.pre = node;
            most = node;
        } else {
            most = node;
            least = node;
        }
        return node.val;
        
    }

    /*
     * @param key: An integer
     * @param value: An integer
     * @return: nothing
     */
    public void set(int key, int value) {
        
        Node node = keyToNode.get(key);
        if (node == null) {
            node = new Node(key, value);
            keyToNode.put(key, node);
            currSize++;
        } else {
            node.val = value;
            
            if (node == most) {
                return;
            }
            
            if (node == least) {
                node.pre.next = null;
                least = node.pre;
            } else {
                node.pre.next = node.next;
                node.next.pre = node.pre;
            }

        }
        
        if (most != null) {
            node.next = most;
            most.pre = node;
            most = node;
        } else {
            most = node;
            least = node;
        }
        if (currSize > capacity) {
            keyToNode.remove(least.key);
            least.pre.next = null;
            least = least.pre;
            currSize--;
        }
    }
}


==================================================================

思路2: 使用singly linkedlist，此时map应变为keyToPrev，


public class LRUCache {
    class ListNode {
        public int key, val;
        public ListNode next;
        
        public ListNode(int key, int val) {
            this.key = key;
            this.val = val;
            this.next = null;
        }
    }
    
    private int capacity, size;
    private ListNode dummy, tail;
    private Map<Integer, ListNode> keyToPrev;

    /*
    * @param capacity: An integer
    */
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.keyToPrev = new HashMap<Integer, ListNode>();
        this.dummy = new ListNode(0, 0);
        this.tail = this.dummy;
    }

    private void moveToTail(int key) {
        ListNode prev = keyToPrev.get(key);
        ListNode curt = prev.next;
        
        if (tail == curt) {
            return;
        }
        
        prev.next = prev.next.next;
        tail.next = curt;
        
        if (prev.next != null) {
            keyToPrev.put(prev.next.key, prev);
        }
        keyToPrev.put(curt.key, tail);
        
        tail = curt;
    }
    
    /*
     * @param key: An integer
     * @return: An integer
     */
    public int get(int key) {
        if (!keyToPrev.containsKey(key)) {
            return -1;
        }
        
        moveToTail(key);
        
        // the key has been moved to the end
        return tail.val;
    }
    
    /*
     * @param key: An integer
     * @param value: An integer
     * @return: nothing
     */
    public void set(int key, int value) {
        // get method will move the key to the end of the linked list
        if (get(key) != -1) {
            ListNode prev = keyToPrev.get(key);
            prev.next.val = value;
            return;
        }
        
        if (size < capacity) {
            size++;
            ListNode curt = new ListNode(key, value);
            tail.next = curt;
            keyToPrev.put(key, tail);
            
            tail = curt;
            return;
        }
        
        // replace the first node with new key, value
        ListNode first = dummy.next;
        keyToPrev.remove(first.key);
        
        first.key = key;
        first.val = value;
        keyToPrev.put(key, dummy);
        
        moveToTail(key);
    }
}
