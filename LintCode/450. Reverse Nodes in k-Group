思路：因为要k个一组来更新，所以无法避免先遍历k个，这样我们才能知道k个节点是否要更新。使用dummy存储head。每次返回更新后，k组节点的最后一个。
       每次传入k组节点之前的最后一个节点。

时间复杂度：O(n)
空间复杂度：O(1)


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: a ListNode
     * @param k: An integer
     * @return: a ListNode
     */
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k < 2) {
            return head;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        head = dummy;
        while (head != null) {
            head = reverseList(head, k);
        }
        
        return dummy.next;
    }
    
    // head -> n1 -> n2 ... nk -> nk+1
    // =>
    // head -> nk -> nk-1 .. n1 -> nk+1
    // return n1
    private ListNode reverseList(ListNode head, int k) {
        ListNode node = head;
        for (int i = 0; i < k; i++) {
            if (node.next == null) {
                return null;
            }    
            node = node.next;
        }
        ListNode nodekplus1 = node.next;
        ListNode n1 = head.next;
        
        ListNode prev = head;
        ListNode curr = head.next;

        while (curr != nodekplus1) {
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        
        head.next = prev;
        n1.next = nodekplus1;
        
        return n1;
    }
}

==========================================
超时  错误代码？

一开始没想到用dummy，所以想用deque来存储第一个节点，同时用deque的peekLast来更新两组k节点之间的关系，但实际上stack和deque存储节点花销太大了。

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: a ListNode
     * @param k: An integer
     * @return: a ListNode
     */
    public ListNode reverseKGroup(ListNode head, int k) {
        // write your code here
        if (head == null) {
            return null;
        }
        
        int count = 0;
        Deque<ListNode> deque = new ArrayDeque<>();
        Stack<ListNode> stack = new Stack<>();
        ListNode node = head;
        while (node != null) {
            stack.push(node);
            if (stack.size() == k) {
                ListNode prev = stack.pop();
                if (!deque.isEmpty()) {
                    deque.peekLast().next = prev;
                }
                deque.offer(prev);
                while (!stack.isEmpty()) {
                    ListNode curr = stack.pop();
                    prev.next = curr;
                    prev = curr;
                    deque.offer(prev);
                }

                
            }
            node = node.next;
        }
        
        if (stack.isEmpty()) {
            deque.peekLast().next = null;
        } else {
            while (stack.size() != 1) {
                stack.pop();
            }
            deque.peekLast().next = stack.pop();
        }
        
        return deque.peekFirst();
    }
}
