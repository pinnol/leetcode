思路：使用map维护每种字符最后一次出现的位置，当map的size超过2的时候，说明现在记录的有三种字符，需要更新l，
     l永远是两个字符中第一个字符第一次出现的位置，注意要把res = Math.max(res, r - l)写在if(map.size() > 2)的块外。

时间复杂度：O(n)
空间复杂度：O(1)

public class Solution {
    /**
     * @param s: a string
     * @return: the length of the longest substring T that contains at most 2 distinct characters
     */
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        Map<Character, Integer> map = new HashMap<>();
        int l = 0, r = 0;
        int res = 0;
        while (r < s.length()) {
            if (map.size() <= 2) {
                char ch = s.charAt(r);
                map.put(ch, r);
                r++;
            }  
            if (map.size() > 2) {
                int left = s.length();
                for (Integer i : map.values()) {
                    left = Math.min(left, i);
                }
                char ch = s.charAt(left);
                map.remove(ch);
                l = left + 1;
            }
            
            res = Math.max(res, r - l);
        }
        return res;
    }
}
