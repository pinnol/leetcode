思路：使用union-find， create a father array, which contains the father of each account name, and then solve the problem in two
steps. First, connect the account names based on their common emails. Second, map the emails to the same id when they belongs to
a same person. 

Time Complexity: O(AlogA), where A = sum(ai), where ai is the length of accounts[i]. If we used union-by-rank, 
    this complexity improves to O(A \alpha(A)) \approx O(A)O(Aα(A))≈O(A), where \alphaα is the Inverse-Ackermann function.
Space Complexity: O(A), the space used by our DSU structure.

public class Solution {
    /**
     * @param accounts: List[List[str]]
     * @return: return a List[List[str]]
     */
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        if (accounts == null) {
            List<List<String>> result = new ArrayList<>();
            return result;
        }
        
        Map<Integer, Integer> father = new HashMap<>();
        // 使用id代替用户名
        for (int i = 0; i < accounts.size(); i++) {
            father.put(i, i);
        }
        
        Map<String, List<Integer>> emailToIds = getEmailToIds(accounts);
        // 将每个独立的用户名归纳到同一个人名下
        for (String email : emailToIds.keySet()) {
            List<Integer> Ids = emailToIds.get(email);
            for (int i = 1; i < Ids.size(); i++) {
                union(father, Ids.get(i), Ids.get(0));
            }
        }
        
        
        Map<Integer, Set<String>> idToEmails = getIdToEmails(father, accounts);
        List<List<String>> result = new ArrayList<>();
        for (Integer id : idToEmails.keySet()) {
            List<String> emailList = new ArrayList<>(idToEmails.get(id));
            Collections.sort(emailList);
            // 在每组email的开始加入用户名
            emailList.add(0, accounts.get(id).get(0));
            result.add(emailList);
        }
        return result;
    }
    
    // 使用id代替每个用户名，建立email - (id1, id2, ...)的map
    public Map<String, List<Integer>> getEmailToIds(List<List<String>> accounts) {
        Map<String, List<Integer>> emailToIds = new HashMap<>();
        for (int i = 0; i < accounts.size(); i++) {
            List<String> account = accounts.get(i);
            for (int j = 1; j < account.size(); j++) {
                List<Integer> Ids = emailToIds.getOrDefault(account.get(j), new ArrayList<Integer>());
                Ids.add(i);
                emailToIds.put(account.get(j), Ids);
            }
        }
        return emailToIds;
    }
    // make the emails belong to the corresponding person
    public Map<Integer, Set<String>> getIdToEmails(Map<Integer, Integer> father, List<List<String>> accounts) {
        Map<Integer, Set<String>> idToEmails = new HashMap<>();
        for (int i = 0; i < accounts.size(); i++) {
            int f = find(father, i);
            List<String> emails = accounts.get(i);
            Set<String> emailSet = idToEmails.getOrDefault(f, new HashSet<String>());
            for (int j = 1; j < emails.size(); j++) {
                emailSet.add(emails.get(j));
            }
            idToEmails.put(f, emailSet);
        }
        return idToEmails;
    }
    
    public Integer find(Map<Integer, Integer> father, Integer i) {
        int j = i;
        while (j != father.get(j)) {
            j = father.get(j);
        }
        return j;
    }
    
    public void union(Map<Integer, Integer> father, Integer a, Integer b) {
        int father1 = find(father, a);
        int father2 = find(father, b);
        if (father1 != father2) {
            father.put(father1, father2);
        }
    }
}
