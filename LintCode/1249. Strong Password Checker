https://leetcode.com/problems/strong-password-checker/discuss/91003/O(n)-java-solution-by-analyzing-changes-allowed-to-fix-each-problem


思路：

变为强密码需要解决三种问题：
1、长度小于6时需要插入字符，长度大于20时需要删除字符
2、缺失字符或数字，此时可以通过插入或者替换字符解决
3、出现三个及以上重复字符，利用置换解决该问题会更好，可以同时做到解决情况二和情况三。

一共有置换、删除、插入三种操作，为什么用置换会更好？
 for repeating characters, all three operations are allowed but the positions where they 
 can be applied are limited within the repeating characters. For example, to fix "aaaaa", 
 we can do one replacement (replace the middle 'a') or two insertions (one after the second 'a' 
 and one after the fourth 'a') or three deletions (delete any of the three 'a's). So the possible 
 changes are (replace, repeating characters), (insert, repeating characters), 
 (delete, repeating characters). (Note however the "power" of each operation for fixing 
 the problem are different -- replacement is the strongest while deletion is the weakest.)


接下来，按照长度进行讨论。
当长度小于6时，插入操作可以处理一切情况，既可以增加长度补全缺失字符，也可以避免重复字符连续。如111ab，我们可以在111中添加upper case的letter。
当长度大于等于6时，先删除，再替换，对于重复字符个数k大于等于3的情况，先将其删除到最近的(3m+2)个，那么如果k正好被3整除，那么我们直接变为k-1，
如果k%3=1，那么变为k-2。这样做的好处是3m+2个重复字符可以用替换m个字符来去除重复，然后遍历一次，进行删除和替换。

为什么把6当做分情况讨论的界限？
1.Length problem: if the total length is less than 6, the change that should be made is (insert, any position), 
which reads as "the operation is insertion and it can be applied to anywhere in the string". If the total length 
is greater than 20, then the change should be (delete, any position).

2.Missing letter or digit: if any of the lowercase/uppercase letters or digits is missing, we can do either 
(insert, any position) or (replace, any position) to correct it. (Note here the characters for insertion or 
replacement can only be those missing.)

小于6的时候前两个问题的解有重复，都可以用insert。

大于20的时候，there is overlapping between the first & third and second & third problems, 
so those overlapping changes will be taken, i.e., first problem => (delete, any position), 
second problem => (replace, any position). The reason not to use (insert, any position) 
for the second problem is that it contradicts the changes made to the first problem 
(therefore has the tendency to cancel its effects). 


public class Solution {
    /**
     * @param s: a string
     * @return: return an integer
     */
    public int strongPasswordChecker(String s) {
        // write  your code here
        int res = 0, n = s.length(), lower = 1, upper = 1, digit = 1;
        int [] v = new int [n];
         for (int i = 0; i < n;) {    	//遍历是否存在缺失字符种类
            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {
                lower = 0;
            }
            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {
                upper = 0;
            }
            if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                digit = 0;
            }
            int j = i;
            while (i < n && s.charAt(i) == s.charAt(j)) {
                ++i;
            }
            v[j] = i - j;	//标记j位置开始连续重复字符的数量
        }
        int missing = (lower + upper + digit);	 //缺失的字符种类数
        if (n < 6) {
            int diff = 6 - n;					//缺失的长度
            res += diff + Math.max(0, missing - diff);	//缺失长度加上missing - diff差值(因为增加的字符不一定补全字符种类，替换)
        } 
        else {
            int over = Math.max(n - 20, 0), left = 0;	//超出长度
            // 此时结果中已经有所有的删除操作，即便我们之后在把每个位置变为3m+2后over还有剩余，而且还是特殊情况每个位置都是重复2次，
            如aabbccddee11AA，我们也可以当做在这里处理了那种特殊情况，可以看做把删除了任意组重复两次的字符。
            res += over;
            for (int k = 1; k < 3; ++k) {		 //如果重复数量k%3==0，-1达到3m+2。如果k%3==1，-2达到3m+2
                for (int i = 0; i < n && over > 0; ++i) {
                    if (v[i] < 3 || v[i] % 3 != (k - 1)) {
                        continue;
                    }
                    v[i] -= k;
                    over -=k;			//删除字符
                }
            }
            for (int i = 0; i < n; ++i) {
                if (v[i] >= 3 && over > 0) {
                    int need = v[i] - 2;		//通过-2得到3m
                    v[i] -= over; // v[i]-over有可能是负的，但这种情况下v[i]-over会小于3，在之后的程序中也不会再把它当做repeating characters处理
                    over -= need;			//直接选择删除3m个
                }
                if (v[i] >= 3)  {		//如果v[i]>=3那么需要进行替换操作，每次除以3即为替换的字符个数
                    left += v[i] / 3;
                }
            }
            res += Math.max(missing, left);	//因为我们处理missing的时候也使用替换，可以同样用于解决问题3，所以我们只需要比较问题23哪个解决方案用到的change多就可以。
        }
        return res;
        
    }
}
