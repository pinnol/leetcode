思路1：使用两个heap，与Find Median from Data Stream思路相似，区别在于需要把window过的num从堆中删除，这个操作是O(n)的，
      因为堆最大为k，所以总体时间复杂度是O(nk)
      
时间复杂度：O(nk)
空间复杂度：O(k)

public class Solution {
    /*
     * @param nums: A list of integers
     * @param k: An integer
     * @return: The median of the element inside the window at each moving
     */
    PriorityQueue<Integer> maxHeap, minHeap;
    public List<Integer> medianSlidingWindow(int[] A, int k) {
        // write your code here
        List<Integer> res = new ArrayList<Integer>();
        int n = A.length;
        if (n == 0) {
            return res;
        }
        
        maxHeap = new PriorityQueue<Integer>(n, Collections.reverseOrder());
        minHeap = new PriorityQueue<Integer>(n);
        
        int i;
        for (i = 0; i < n; ++i) {
            if (maxHeap.size() == 0 || A[i] <= maxHeap.peek()) {
                maxHeap.offer(A[i]);
            }
            else {
                minHeap.offer(A[i]);
            }
            
            balance();
            if (i - k >= 0) {
                if (A[i - k] > maxHeap.peek()) {
                    minHeap.remove(A[i - k]);
                }
                else {
                    maxHeap.remove(A[i - k]);
                }
            }
            
            balance();
            
            if (i >= k - 1) {
                res.add(maxHeap.peek());
            }
        }
        
        return res;
    }
    
    private void balance() {
        while (maxHeap.size() < minHeap.size()) {
            maxHeap.offer(minHeap.poll());
        }
        
        while (minHeap.size() < maxHeap.size() - 1) {
            minHeap.offer(maxHeap.poll());
        }
    }
}
