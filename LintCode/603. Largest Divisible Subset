public class Solution {
    /*
     * @param nums: a set of distinct positive integers
     * @return: the largest subset 
     */
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if (nums == null || nums.length == 0) {
            return new ArrayList<Integer>();
        }
        
        Arrays.sort(nums);
        int n = nums.length;
        int[] f = new int[n];
        int[] pre = new int[n];

        int max = Integer.MIN_VALUE;
        // 注意这里不能初始化为-1
        // 因为当集合中元素只有一个的时候，max_i仍是-1，在下面判断的时候会超出界限
        int max_i = 0;
        for (int i= 0; i< n; i++) {
            f[i] = 1;
            pre[i] = -1;
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0 && f[j] + 1 > f[i]) {
                    f[i] = f[j] + 1;
                    pre[i] = j;
                    
                    if (max < f[i]) {
                        max = f[i];
                        max_i = i;
                    }
                }
            }
        }
        
        List<Integer> res = new ArrayList<>();
        res.add(nums[max_i]);
        max_i = pre[max_i];
        System.out.println("max_i="+max_i);
        while (max_i != -1) {
            max = nums[max_i];
            res.add(max);
            max_i = pre[max_i];
        }
        return res;
        
    }
}
