这题要分条件讨论，一般情况下我们并不保证BST是balanced，所以第二种方法的时间复杂度就会退化成O(n), 代码还长。此时我们只需要第一种方法，也就是inorder遍历就好。

第一种：

第二种：tree是balanced
时间复杂度：O(k + log(n)) k是move upper/lower的时间，只有在balanced tree的情况下才是k, logn是构造stack的时间，如果不是balanced tree就会退化成O(n)
空间复杂度：O(log(n))
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param target: the given target
     * @param k: the given k
     * @return: k values in the BST that are closest to the target
     */
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        // write your code here

        List<Integer> result = new ArrayList<>();
        if (root == null || k == 0) {
            return result;
        }
        Stack<TreeNode> lowerStack = getStack(root, target);
        
        Stack<TreeNode> upperStack = new Stack<>();
        upperStack.addAll(lowerStack);
        if (lowerStack.peek().val > target) {
            moveLower(lowerStack);
        } else {
            moveUpper(upperStack);
        }
        
        for (int i = 0; i < k; i++) {
            if (lowerStack.isEmpty() || !upperStack.isEmpty() && target - lowerStack.peek().val > upperStack.peek().val - target) {
                result.add(upperStack.peek().val);
                moveUpper(upperStack);
            } else {
                result.add(lowerStack.peek().val);
                moveLower(lowerStack);
            }
        }
        
        return result;
    }
    
    
    // 这题的一个难点就是用BST查找的方法构造stack可不可行，实际上是可行的。这种方法构造的stack，就是我们一般情况下tree iterator的状态。只要保证stack中是一条从根节点走到当前节点的path就可以。
    //       5
    //      / 
    //     3 
    //    /  \ 
    //   2    4
    //  当target是3.5的时候。我们的stack是[5,3,4]往上挪动一个节点就是5，2可以当做是我们已经遍历过的节点。
    private Stack<TreeNode> getStack(TreeNode root, double target) {
        Stack<TreeNode> stack = new Stack<>();
        if (root == null) {
            return stack;
        }
        
        while (root != null) {
            stack.push(root);
            if (root.val > target) {
                root = root.left;
            // 注意这里不能在找到target的时候就返回stack，一定要等到将比较进行到底，这样才能求出最小上限和最大下限。比如当target点
            // 还有右子树的时候，提前停止，就有可能无法求出最小上限。此时我们找到的最后一个点一定是最小的上限或者最大的下限，那么把另一个stack相应的
            // 向下或者向上挪动一个点就是target，这样就不会漏掉target自己。
            } else{
                root = root.right;
            }
        }
        return stack;
    }
    
    private void moveUpper(Stack<TreeNode> stack) {
        TreeNode node = stack.peek();
        if (node.right == null) {
            node = stack.pop();
            while (!stack.isEmpty() && stack.peek().right == node) {
                node = stack.pop();
            }  
            return;
        }
        
        node = node.right;
        while (node != null) {
            stack.push(node);
            node = node.left;
        }
        return;
    }
    
    private void moveLower(Stack<TreeNode> stack) {
        // 这里不能直接使用pop，因为我们构造stack的时候并不是使用最简洁的方法，即从root就开始使用pop方法构造stack，将所有比较过的node除去。
        // 这里实际上还有没被pop出的已被比较过的点，构造stack的逻辑实际上跟这里的代码一致。如果我们改用pop，像
        //            41
        //       37       44
        //   1       
        //0
        // 这种树并且target为3.2的时候，构造出来的stack将是{41,37,1}，我们把1pop出去后，添加0，下一次调用函数将 0 pop，
        // 此时本应该pop出37 41使stack为空，但因为此时1已经被pop了，37的左节点不是0，所以37不会被pop，致使stack不为空，
        // 最小值变为了37，程序就会出错。
        TreeNode node = stack.peek();
        if (node.left == null) {
            node = stack.pop();
            while (!stack.isEmpty() && stack.peek().left == node) {
                node = stack.pop();
            }  
            return;
        }
        
        node = node.left;
        while (node != null) {
            stack.push(node);
            node = node.right;
        }
        return;
    }
}
