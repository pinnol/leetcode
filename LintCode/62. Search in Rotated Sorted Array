思路：判断目标值在每次binary search后在哪一边，相比一般的binary search来说划分的情况种类更多，有四种：先根据mid与start和end之间的关系，
      推断mid和array的哪一边之间是sorted的，然后根据mid和target的关系，以及target和start(end)的关系再细分。
      注意不能忽略target和pivot之间的关系。
      
      考察了binary search的基本应用原则：sorted
      
时间复杂度: O(logn)
空间复杂度: O(1)


public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
        if (A == null || A.length == 0) {
            return -1;
        }
        
        int n = A.length;
        int start = 0, end = A.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
                // 也可以写成A[0]，因为没有重复值
            } else if (A[mid] >= A[start]) {
                // 不能只写target <= A[mid]，这样无法判断target是否在sorted的区间内
                if (target <= A[mid] && target >= A[start]) {
                    end = mid; 
                } else {
                    start = mid;
                }
            } else {
                if (target >= A[mid] && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            }
        }
        
        if (A[start] == target) {
            return start;
        } else if (A[end] == target) {
            return end;
        } else {
            return - 1;
        }
    }
}

      
